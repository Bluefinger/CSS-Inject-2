{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/mixwith/mixwith.js","src/CssInject.js","src/classes/CssBase.js","src/classes/CssInline.js","src/classes/CssRules.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","factory","define","amd","mod","mixwith","undefined","Object","defineProperty","value","_cachedApplicationRef","Symbol","_mixinRef","_originalMixin","wrap","mixin","wrapper","setPrototypeOf","Cached","superclass","applicationRef","name","hasOwnProperty","application","HasInstance","hasInstance","originalMixin","this","getPrototypeOf","BareMixin","prototype","MixinBuilder","Mixin","mix","superClass","_classCallCheck","_createClass","key","Array","from","arguments","reduce","c","m","opts","id","media","modifier","StylesOnly","InlineOnly","Full","_mixwith","_CssBase2","default","with","_CssInline2","_this2","_possibleConstructorReturn","__proto__","init","_CssRules2","_this3","idCount","CssBase","rules","el","obj","styles","document","createElement","type","head","getElementsByTagName","appendChild","styleSheets","cssRules","destroy","parentNode","removeChild","addInline","elem","property","style","setProperty","addObjectInline","elems","object","_typeof","TypeError","removeInline","removeProperty","removeArrayInline","array","len","_i","removeObjectInline","keys","CssInlineMixin","CssInline","_superclass","apply","_inherits","add","selector","index","indexOf","push","str","insertRule","objectAdd","remove","splice","deleteRule","objectRemove","properties","arrayRemove","CssRulesMixin","CssRules"],"mappings":"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","file":"cssinject.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.mixwith = mod.exports;\n  }\n})(this, function (exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  const _cachedApplicationRef = exports._cachedApplicationRef = Symbol('_cachedApplicationRef');\n\n  const _mixinRef = exports._mixinRef = Symbol('_mixinRef');\n\n  const _originalMixin = exports._originalMixin = Symbol('_originalMixin');\n\n  const wrap = exports.wrap = (mixin, wrapper) => {\n    Object.setPrototypeOf(wrapper, mixin);\n    if (!mixin[_originalMixin]) {\n      mixin[_originalMixin] = mixin;\n    }\n    return wrapper;\n  };\n\n  const Cached = exports.Cached = mixin => wrap(mixin, superclass => {\n    // Get or create a symbol used to look up a previous application of mixin\n    // to the class. This symbol is unique per mixin definition, so a class will have N\n    // applicationRefs if it has had N mixins applied to it. A mixin will have\n    // exactly one _cachedApplicationRef used to store its applications.\n    let applicationRef = mixin[_cachedApplicationRef];\n    if (!applicationRef) {\n      applicationRef = mixin[_cachedApplicationRef] = Symbol(mixin.name);\n    }\n    // Look up an existing application of `mixin` to `c`, return it if found.\n    if (superclass.hasOwnProperty(applicationRef)) {\n      return superclass[applicationRef];\n    }\n    // Apply the mixin\n    let application = mixin(superclass);\n    // Cache the mixin application on the superclass\n    superclass[applicationRef] = application;\n    return application;\n  });\n\n  const HasInstance = exports.HasInstance = mixin => {\n    if (Symbol.hasInstance && !mixin.hasOwnProperty(Symbol.hasInstance)) {\n      Object.defineProperty(mixin, Symbol.hasInstance, {\n        value: function (o) {\n          const originalMixin = this[_originalMixin];\n          while (o != null) {\n            if (o.hasOwnProperty(_mixinRef) && o[_mixinRef] === originalMixin) {\n              return true;\n            }\n            o = Object.getPrototypeOf(o);\n          }\n          return false;\n        }\n      });\n    }\n    return mixin;\n  };\n\n  const BareMixin = exports.BareMixin = mixin => wrap(mixin, superclass => {\n    // Apply the mixin\n    let application = mixin(superclass);\n\n    // Attach a reference from mixin applition to wrapped mixin for RTTI\n    // mixin[@@hasInstance] should use this.\n    application.prototype[_mixinRef] = mixin[_originalMixin];\n    return application;\n  });\n\n  const Mixin = exports.Mixin = mixin => Cached(HasInstance(BareMixin(mixin)));\n\n  const mix = exports.mix = superClass => new MixinBuilder(superClass);\n\n  class MixinBuilder {\n    constructor(superclass) {\n      this.superclass = superclass;\n    }\n\n    with() {\n      return Array.from(arguments).reduce((c, m) => m(c), this.superclass);\n    }\n\n  }\n});","/**\r\n * @module CssInject\r\n */\r\n\"use strict\";\r\n\r\nimport { mix } from \"mixwith\";\r\nimport CssBase from \"./classes/CssBase\";\r\nimport CssRules from \"./classes/CssRules\";\r\nimport CssInline from \"./classes/CssInline\";\r\n\r\n\r\n/**\r\n * The Inline Only CssInject Class without Stylesheet mixins\r\n * \r\n * @extends CssBase\r\n * @mixes CssInline\r\n */\r\nexport class InlineOnly extends mix(CssBase).with(CssInline) {}\r\n\r\n/**\r\n * The Styles Only CssInject Class without Inline mixins\r\n * \r\n * @extends CssBase\r\n * @mixes CssRules\r\n */\r\nexport class StylesOnly extends mix(CssBase).with(CssRules) {\r\n\r\n    /**\r\n     * Initialises the state of CssInject and what kind of stylesheet it is.\r\n     * \r\n     * @param  {string} [id] A unique ID for the style element, else it defaults to 'css-inject-{idCount}', which increments with each new instance \r\n     * @param  {string} [media] Defaults to \"screen\", but can be used to modify what sort of stylesheet the instance represents, like a dynamic print stylesheet\r\n     */\r\n    constructor(id, media) {\r\n        super(id, media);\r\n        this.init();\r\n    }\r\n}\r\n\r\n/**\r\n * The Full CssInject Class with both Stylesheet and Inline mixins\r\n * \r\n * @extends CssBase\r\n * @mixes CssRules\r\n * @mixes CssInline\r\n */\r\nexport class Full extends mix(CssBase).with(CssRules, CssInline) {\r\n\r\n    /**\r\n     * Initialises the state of CssInject and what kind of stylesheet it is.\r\n     * \r\n     * @param  {string} [id] A unique ID for the style element, else it defaults to 'css-inject-{idCount}', which increments with each new instance \r\n     * @param  {string} [media] Defaults to \"screen\", but can be used to modify what sort of stylesheet the instance represents, like a dynamic print stylesheet\r\n     */\r\n    constructor(id, media) {\r\n        super(id, media);\r\n        this.init();\r\n    }\r\n}\r\n\r\n/**\r\n * Factory Function for creating CssInject instances\r\n * \r\n * @param  {object} [opts] Defaults to an empty object if not provided\r\n * @param  {string} [opts.id] The ID for the stylesheet\r\n * @param  {string} [opts.media] The media string to define what kind of stylesheet it is\r\n * @param  {(string|number)} [opts.modifier] A string or number value to specific what features are initialised for the CssInject instance\r\n * @returns {(Full|InlineOnly|StylesOnly)} returns a mixed CssBase class depending on the modifiers provided\r\n */\r\nexport default function create(opts = {}) {\r\n    const { id, media, modifier } = opts;\r\n\r\n    switch (modifier) {\r\n        case \"StylesOnly\":\r\n        case 1:\r\n            return new StylesOnly(id, media);\r\n\r\n        case \"InlineOnly\":\r\n        case 2:\r\n            return new InlineOnly();\r\n\r\n        default: return new Full(id, media);\r\n    }\r\n}","\"use strict\";\r\n\r\nlet idCount = 0;\r\n\r\n/**\r\n * Initialises a <style></style> element in the document head and syncs the CSSStylesheet object to CssInject\r\n * \r\n * @this {CssBase}\r\n * @return {CssBase} returns itself, chaining method\r\n */\r\nconst init = function() {\r\n    let head;\r\n\r\n    this.el = document.createElement(\"style\");\r\n    this.el.type = \"text/css\";\r\n    this.el.id = this.id;\r\n    this.el.media = this.media;\r\n    head = document.head || document.getElementsByTagName('head')[0];\r\n    head.appendChild(this.el);\r\n\r\n    this.obj = document.styleSheets[document.styleSheets.length - 1];\r\n    this.rules = this.obj.cssRules;\r\n    this.styles = [];\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes its <style> element from the document head and destroys itself\r\n * \r\n * @this {CssBase}\r\n * @return {void}\r\n */\r\nconst destroy = function() {\r\n    if (this.el) {\r\n        let head = this.el.parentNode;\r\n        head.removeChild(this.el);\r\n        this.el = null;\r\n    }\r\n    this.id = null;\r\n    this.media = null;\r\n    this.rules = null;\r\n    this.obj = null;\r\n    this.styles = null;\r\n}\r\n\r\n/** The Base CssInject Class, representing a style instance to be modified and controlled by CssInject */\r\nexport default class CssBase {\r\n\r\n    /**\r\n     * Initialises the state of CssInject and what kind of stylesheet it is.\r\n     * \r\n     * @param  {string} [id] A unique ID for the style element, else it defaults to 'css-inject-{idCount}', which increments with each new instance \r\n     * @param  {string} [media] Defaults to \"screen\", but can be used to modify what sort of stylesheet the instance represents, like a dynamic print stylesheet\r\n     */\r\n    constructor(id = `css-inject-${idCount++}`, media = \"screen\") {\r\n        this.id = id;\r\n        this.media = media;\r\n        this.rules = null;\r\n        this.el = null;\r\n        this.obj = null;\r\n        this.styles = null;\r\n    }\r\n}\r\n\r\nCssBase.prototype.init = init;\r\nCssBase.prototype.destroy = destroy;","/**\r\n * @module CssInline\r\n */\r\n\"use strict\";\r\n\r\nimport { Mixin } from \"mixwith\";\r\n\r\n/**\r\n * Adds Inline styles to a given HTMLElement\r\n * \r\n * @this {CssBase}\r\n * @param {HTMLElement} elem The element to be styled\r\n * @param {string} property The CSS property to be added or modified\r\n * @param {string} value The value for the CSS property\r\n * @chainable\r\n * @returns {CssBase} Chaining method, returns itself\r\n */\r\nconst addInline = function (elem, property, value) {\r\n    elem.style.setProperty(property, value);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Adds Inline styles to a given HTMLElement or to all elements in a HTMLCollection\r\n * \r\n * @this {CssBase}\r\n * @param {(HTMLElement|HTMLCollection)} elems Either an element or a collection of elements to be styled\r\n * @param {Object.<string, Object.<string, string>>} object An object containing all the styles to be added/modified\r\n * @chainable\r\n * @returns {CssBase} Chaining Method, returns itself\r\n */\r\nconst addObjectInline = function (elems, object) {\r\n    if (typeof object === \"object\") {\r\n        for (let property in object) {\r\n            if (object.hasOwnProperty(property)) {\r\n                if (elems.length) {\r\n                    for (let i = 0; i < elems.length; i++) {\r\n                        this.addInline(elems[i], property, object[property]);\r\n                    }\r\n                } else {\r\n                    this.addInline(elems, property, object[property]);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n}\r\n\r\n/**\r\n * Removes an Inline style from a given HTMLElement\r\n * \r\n * @this {CssBase}\r\n * @param {HTMLElement} elem The HTMLElement to have styles removed from\r\n * @param {string} property The property to remove\r\n * @chainable\r\n * @returns {CssBase} Chaining method, returns itself\r\n */\r\nconst removeInline = function(elem, property) {\r\n    elem.style.removeProperty(property);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes Inline style properities in an array from a given HTMLElement or HTMLCollection\r\n * \r\n * @param {(HTMLElement|HTMLCollection)} elems The HTMLElement or HTMLCollection to have styles removed from\r\n * @param {Array.<string>} array The properties to remove\r\n * @chainable\r\n * @returns {CssBase} Chaining Method, returns itself\r\n */\r\nconst removeArrayInline = function(elems, array) {\r\n    let property = null;\r\n    for (let i = 0, len = array.length; i < len; i++) {\r\n        property = array[i];\r\n        if (elems.length) {\r\n            for (let i = 0; i < elems.length; i++) {\r\n                this.removeInline(elems[i], property);\r\n            }\r\n        } else {\r\n            this.removeInline(elems, property);\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes Inline style properities in an object from a given HTMLElement or HTMLCollection\r\n * \r\n * @param {(HTMLElement|HTMLCollection)} elems The HTMLElement or HTMLCollection to have styles removed from\r\n * @param {Object.<string, any>} object The properties to remove\r\n * @chainable\r\n * @returns {CssBase} Chaining Method, returns itself\r\n */\r\nconst removeObjectInline = function(elems, object) {\r\n    if (typeof object === \"object\") {\r\n        this.removeArrayInline(elems, Object.keys(object));\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Create a CssInline mixin class.\r\n *\r\n * @exports cssinline\r\n * @param {*} superclass - The class to mix onto.\r\n * @return {module:cssinline~mixin} The mixin class.\r\n */\r\nconst CssInlineMixin = Mixin(superclass => {\r\n\r\n    /**\r\n     * CssInline mixin.\r\n     *\r\n     * @mixin\r\n     * @alias module:cssinline~mixin\r\n     */\r\n    class CssInline extends superclass {}\r\n\r\n    CssInline.prototype.addInline = addInline;\r\n    CssInline.prototype.removeInline = removeInline;\r\n    CssInline.prototype.addObjectInline = addObjectInline;\r\n    CssInline.prototype.removeObjectInline = removeObjectInline;\r\n    CssInline.prototype.removeArrayInline = removeArrayInline;\r\n\r\n    return CssInline;\r\n})\r\n\r\nexport default CssInlineMixin","/**\r\n * @module CssRules\r\n */\r\n\r\n\"use strict\";\r\nimport { Mixin } from \"mixwith\";\r\n\r\n/**\r\n * Adds a new style rule or modifies an existing rule with new properties and/or values\r\n * \r\n * @this {CssBase}\r\n * @param  {string} selector The CSS selector for the style rule\r\n * @param  {string} property The CSS property for the style rule\r\n * @param  {string} value The value of the CSS property\r\n * @chainable\r\n * @returns {CssBase} Chaining method, returns itself\r\n */\r\nconst add = function (selector, property, value) {\r\n    const index = this.styles.indexOf(selector);\r\n\r\n    if (index > -1) {\r\n        this.rules[index].style.setProperty(property,value);\r\n    } else {\r\n        const i = this.styles.length;\r\n        this.styles.push(selector);\r\n        const str = (!value) ? property : property + \":\" + value + \";\";\r\n        this.obj.insertRule(`${selector}{${str}}`, i);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Adds new style rules or modifies existing rules via a provided object detailing all the styles to be added/modified\r\n * \r\n * @this {CssBase}\r\n * @param  {Object.<string, Object.<string, string>>} object An object detailing all the styles to be provided, keys being selectors and sub-keys properties\r\n * @chainable\r\n * @returns {CssBase} Chaining method, returns itself\r\n */\r\nconst objectAdd = function(object) {\r\n    if (typeof object === \"object\") {\r\n        for (let selector in object) {\r\n            if (object.hasOwnProperty(selector)) {\r\n                let str = \"\";\r\n                const index = this.styles.indexOf(selector);\r\n                for (let property in object[selector]) {\r\n                    if (object[selector].hasOwnProperty(property)) {\r\n                        let value = object[selector][property];\r\n                        if (index === -1) {\r\n                            str += property + \":\" + value + \";\";\r\n                        } else {\r\n                            this.add(selector, property, value);\r\n                        }\r\n                    }\r\n                }\r\n                if (index === -1) this.add(selector,str);\r\n            }\r\n        }\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a style rule or a property if the latter is provided\r\n * \r\n * @this {CssBase}\r\n * @param  {string} selector The CSS selector for the rule\r\n * @param  {string} [property] The CSS property to be removed\r\n * @chainable\r\n * @returns {CssBase} Chaining method, returns itself\r\n */\r\nconst remove = function (selector, property) {\r\n    const index = this.styles.indexOf(selector);\r\n\r\n    if (index > -1) {\r\n        if (property) {\r\n            this.rules[index].style.removeProperty(property)\r\n        } else {\r\n            this.styles.splice(index, 1);\r\n            this.obj.deleteRule(index)\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes new style rules or properties via a provided object detailing all the styles to be deleted\r\n * \r\n * @this {CssBase}\r\n * @param  {Object.<string, Object.<string, any>>} object An object detailing all the styles to be removed, keys being selectors and sub-keys being properties\r\n * @chainable\r\n * @returns {CssBase} Chaining method, returns itself\r\n */\r\nconst objectRemove = function(object) {\r\n    if (typeof object === \"object\") {\r\n        for (let selector in object) {\r\n            if (object.hasOwnProperty(selector)) {\r\n                const properties = Object.keys(object[selector]);\r\n                const l = properties.length;\r\n                if (l > 0) {\r\n                    for (let i=0;i<l;i+=1) {\r\n                        this.remove(selector, properties[i]);\r\n                    }\r\n                } else {\r\n                    this.remove(selector);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n}\r\n\r\n/**\r\n * Removes new style rules or properties via a provided object detailing all the styles to be deleted\r\n * \r\n * @this {CssBase}\r\n * @param  {Array.<string>} array An Array of CSS Selectors to remove from the stylesheet\r\n * @chainable\r\n * @returns {CssBase} Chaining method, returns itself\r\n */\r\nconst arrayRemove = function(array) {\r\n    for (let i = 0, len = array.length; i < len; i++) {\r\n        this.remove(array[i]);\r\n    }\r\n    return this;\r\n}\r\n\r\n/**\r\n * Create a CssRules mixin class.\r\n *\r\n * @exports cssrules\r\n * @param {*} superclass - The class to mix onto.\r\n * @return {module:cssrules~mixin} The mixin class.\r\n */\r\nconst CssRulesMixin = Mixin(superclass => {\r\n\r\n    /**\r\n     * A Mixin for Stylesheet manipulation\r\n     * @mixin\r\n     * @alias module:cssrules~mixin\r\n     */\r\n    class CssRules extends superclass {}\r\n\r\n    CssRules.prototype.add = add;\r\n    CssRules.prototype.remove = remove;\r\n    CssRules.prototype.objectAdd = objectAdd;\r\n    CssRules.prototype.objectRemove = objectRemove;\r\n    CssRules.prototype.arrayRemove = arrayRemove;\r\n\r\n    return CssRules;\r\n});\r\n\r\nexport default CssRulesMixin"]}