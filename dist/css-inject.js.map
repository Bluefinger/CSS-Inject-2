{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/CssInject.js","src/classes/CssInline.js","src/classes/CssRules.js"],"names":["f","exports","module","define","amd","window","global","self","this","cssInject","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","CssInline","CssRules","default","opts","arguments","undefined","id","media","_CssRules2","addInline","elem","property","value","style","setProperty","addObjectInline","elems","object","_typeof","TypeError","hasOwnProperty","removeArrayInline","array","len","_i","removeInline","removeProperty","removeObjectInline","Object","keys","idCount","PROTECTED","WeakMap","fetchProperty","instance","prop","get","_classCallCheck","has","el","document","createElement","type","head","getElementsByTagName","appendChild","obj","styleSheets","rules","cssRules","set","styles","slice","prototype","destroy","parentNode","removeChild","delete","add","selector","props","index","indexOf","push","str","insertRule","remove","_PROTECTED$get","splice","deleteRule","objectAdd","objectRemove","properties","arrayRemove"],"mappings":"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","file":"css-inject.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","/**\r\n * @module CssInject\r\n */\r\n\"use strict\";\r\n\r\nimport CssRules from \"./classes/CssRules\";\r\nimport CssInline from \"./classes/CssInline\";\r\n\r\n/**\r\n * Factory Function for creating CssInject instances\r\n * \r\n * @function\r\n * @param  {object} [opts] Defaults to an empty object if not provided\r\n * @param  {string} [opts.id] The ID for the stylesheet\r\n * @param  {string} [opts.media] The media string to define what kind of stylesheet it is\r\n * @returns {CssRules} returns a mixed CssBase class depending on the modifiers provided\r\n */\r\nconst create = function (opts = {}) {\r\n    const { id, media } = opts;\r\n\r\n    return new CssRules(id, media);\r\n}\r\n\r\nexport {\r\n    CssInline,\r\n    CssRules,\r\n    create as default\r\n}","\"use strict\";\r\n\r\n/**\r\n * Adds Inline styles to a given HTMLElement\r\n * \r\n * @this {CssInline}\r\n * @param {HTMLElement} elem The element to be styled\r\n * @param {string} property The CSS property to be added or modified\r\n * @param {string} value The value for the CSS property\r\n * @chainable\r\n * @returns {CssInline} Chaining method, returns itself\r\n */\r\nconst addInline = function (elem, property, value) {\r\n    elem.style.setProperty(property, value);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Adds Inline styles to a given HTMLElement or to all elements in a HTMLCollection\r\n * \r\n * @this {CssInline}\r\n * @param {(HTMLElement|HTMLCollection)} elems Either an element or a collection of elements to be styled\r\n * @param {Object.<string, Object.<string, string>>} object An object containing all the styles to be added/modified\r\n * @chainable\r\n * @returns {CssInline} Chaining Method, returns itself\r\n */\r\nconst addObjectInline = function (elems, object) {\r\n    if (typeof object === \"object\") {\r\n        for (let property in object) {\r\n            if (object.hasOwnProperty(property)) {\r\n                if (elems.length) {\r\n                    for (let i = 0; i < elems.length; i++) {\r\n                        this.addInline(elems[i], property, object[property]);\r\n                    }\r\n                } else {\r\n                    this.addInline(elems, property, object[property]);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n}\r\n\r\n/**\r\n * Removes an Inline style from a given HTMLElement\r\n * \r\n * @this {CssInline}\r\n * @param {HTMLElement} elem The HTMLElement to have styles removed from\r\n * @param {string} property The property to remove\r\n * @chainable\r\n * @returns {CssInline} Chaining method, returns itself\r\n */\r\nconst removeInline = function(elem, property) {\r\n    elem.style.removeProperty(property);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes Inline style properities in an array from a given HTMLElement or HTMLCollection\r\n * \r\n * @this {CssInline}\r\n * @param {(HTMLElement|HTMLCollection)} elems The HTMLElement or HTMLCollection to have styles removed from\r\n * @param {Array.<string>} array The properties to remove\r\n * @chainable\r\n * @returns {CssInline} Chaining Method, returns itself\r\n */\r\nconst removeArrayInline = function(elems, array) {\r\n    let property = null;\r\n    for (let i = 0, len = array.length; i < len; i++) {\r\n        property = array[i];\r\n        if (elems.length) {\r\n            for (let i = 0; i < elems.length; i++) {\r\n                this.removeInline(elems[i], property);\r\n            }\r\n        } else {\r\n            this.removeInline(elems, property);\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes Inline style properities in an object from a given HTMLElement or HTMLCollection\r\n * \r\n * @this {CssInline}\r\n * @param {(HTMLElement|HTMLCollection)} elems The HTMLElement or HTMLCollection to have styles removed from\r\n * @param {Object.<string, any>} object The properties to remove\r\n * @chainable\r\n * @returns {CssInline} Chaining Method, returns itself\r\n */\r\nconst removeObjectInline = function(elems, object) {\r\n    if (typeof object === \"object\") {\r\n        this.removeArrayInline(elems, Object.keys(object));\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Packaged methods for manipulating inline styles\r\n * \r\n * @namespace\r\n * @typedef {Object} CssInline\r\n * @type {object} CssInline\r\n */\r\nconst CssInline = {\r\n\r\n    /** \r\n     * @memberof CssInline\r\n     * @function addInline\r\n     */\r\n    addInline,\r\n\r\n    /** \r\n     * @memberof CssInline\r\n     * @function addObjectInline\r\n     */\r\n    addObjectInline,\r\n\r\n    /** \r\n     * @memberof CssInline\r\n     * @function removeArrayInline\r\n     */\r\n    removeArrayInline,\r\n\r\n    /** \r\n     * @memberof CssInline\r\n     * @function removeInline\r\n     */\r\n    removeInline,\r\n\r\n    /** \r\n     * @memberof CssInline\r\n     * @function removeObjectInline\r\n     */\r\n    removeObjectInline\r\n}\r\n\r\nexport default CssInline","\"use strict\";\r\n\r\nlet idCount = 0;\r\n\r\n/**\r\n * @typedef {Object.<string, Object.<string, string>>} CssRulesObject\r\n */\r\n\r\n/** \r\n * @typedef {Object} CssRuleProperties\r\n * @property {HTMLElement} el\r\n * @property {string} id\r\n * @property {string} media\r\n * @property {CSSStyleSheet} obj\r\n * @property {CSSRuleList} rules\r\n * @property {Array.<string>} styles\r\n */\r\n\r\n/**\r\n * @typedef {WeakMap.<CssRules, CssRuleProperties>} Protected\r\n */\r\n\r\n /**\r\n  * Protected Properties for CssRules\r\n  * @type {Protected}\r\n  */\r\nconst PROTECTED = new WeakMap();\r\n\r\n/**\r\n * Fetch the CssRule private property\r\n * \r\n * @param {CssRules} instance The CssRules instance to fetch private properties from\r\n * @param {string} property The property to return\r\n * @returns {CssRuleProperties.<*>} Returns the property value\r\n */\r\nconst fetchProperty = function(instance, property) {\r\n    const prop = PROTECTED.get(instance);\r\n\r\n    return (prop) ? prop[property] : undefined;\r\n}\r\n\r\n/**\r\n * Removes its <style> element from the document head and destroys itself\r\n * \r\n * @this {CssRules}\r\n * @return {void}\r\n */\r\nconst destroy = function() {\r\n    if (PROTECTED.has(this)) {\r\n        const el = fetchProperty(this, \"el\");\r\n\r\n        const head = el.parentNode;\r\n        head.removeChild(el);\r\n\r\n        PROTECTED.delete(this);\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a new style rule or modifies an existing rule with new properties and/or values\r\n * \r\n * @this {CssRules}\r\n * @param  {string} selector The CSS selector for the style rule\r\n * @param  {string} property The CSS property for the style rule\r\n * @param  {string} value The value of the CSS property\r\n * @chainable\r\n * @returns {CssRules} Chaining method, returns itself\r\n */\r\nconst add = function (selector, property, value) {\r\n    const props = PROTECTED.get(this);\r\n    const index = props.styles.indexOf(selector);\r\n\r\n    if (index > -1) {\r\n        props.rules[index].style.setProperty(property,value);\r\n    } else {\r\n        const i = props.styles.length;\r\n        props.styles.push(selector);\r\n        const str = (!value) ? property : property + \":\" + value + \";\";\r\n        props.obj.insertRule(`${selector}{${str}}`, i);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Adds new style rules or modifies existing rules via a provided object detailing all the styles to be added/modified\r\n * \r\n * @this {CssRules}\r\n * @param  {CssRulesObject} object An object detailing all the styles to be provided, keys being selectors and sub-keys properties\r\n * @chainable\r\n * @returns {CssRules} Chaining method, returns itself\r\n */\r\nconst objectAdd = function(object) {\r\n    if (typeof object === \"object\") {\r\n        const styles = fetchProperty(this, \"styles\");\r\n        for (let selector in object) {\r\n            if (object.hasOwnProperty(selector)) {\r\n                let str = \"\";\r\n                const index = styles.indexOf(selector);\r\n                for (let property in object[selector]) {\r\n                    if (object[selector].hasOwnProperty(property)) {\r\n                        let value = object[selector][property];\r\n                        if (index === -1) {\r\n                            str += property + \":\" + value + \";\";\r\n                        } else {\r\n                            this.add(selector, property, value);\r\n                        }\r\n                    }\r\n                }\r\n                if (index === -1) this.add(selector,str);\r\n            }\r\n        }\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a style rule or a property if the latter is provided\r\n * \r\n * @this {CssRules}\r\n * @param  {string} selector The CSS selector for the rule\r\n * @param  {string} [property] The CSS property to be removed\r\n * @chainable\r\n * @returns {CssRules} Chaining method, returns itself\r\n */\r\nconst remove = function (selector, property) {\r\n    const { styles, rules, obj } = PROTECTED.get(this);\r\n    const index = styles.indexOf(selector);\r\n\r\n    if (index > -1) {\r\n        if (property) {\r\n            rules[index].style.removeProperty(property)\r\n        } else {\r\n            styles.splice(index, 1);\r\n            obj.deleteRule(index);\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes new style rules or properties via a provided object detailing all the styles to be deleted\r\n * \r\n * @this {CssRules}\r\n * @param  {CssRulesObject} object An object detailing all the styles to be removed, keys being selectors and sub-keys being properties\r\n * @chainable\r\n * @returns {CssRules} Chaining method, returns itself\r\n */\r\nconst objectRemove = function(object) {\r\n    if (typeof object === \"object\") {\r\n        for (let selector in object) {\r\n            if (object.hasOwnProperty(selector)) {\r\n                const properties = Object.keys(object[selector]);\r\n                const l = properties.length;\r\n                if (l > 0) {\r\n                    for (let i=0;i<l;i+=1) {\r\n                        this.remove(selector, properties[i]);\r\n                    }\r\n                } else {\r\n                    this.remove(selector);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        throw new TypeError(\"Parameter is not an object\");\r\n    }\r\n    return this;\r\n}\r\n\r\n/**\r\n * Removes new style rules or properties via a provided object detailing all the styles to be deleted\r\n * \r\n * @this {CssRules}\r\n * @param  {Array.<string>} array An Array of CSS Selectors to remove from the stylesheet\r\n * @chainable\r\n * @returns {CssRules} Chaining method, returns itself\r\n */\r\nconst arrayRemove = function(array) {\r\n    for (let i = 0, len = array.length; i < len; i++) {\r\n        this.remove(array[i]);\r\n    }\r\n    return this;\r\n}\r\n\r\n/** The CssRules Class, representing a style instance to be modified and controlled by CssInject */\r\nexport default class CssRules {\r\n\r\n    /**\r\n     * Initialises the state of CssRules and what kind of stylesheet it is.\r\n     * \r\n     * @param  {string} [id] A unique ID for the style element, else it defaults to 'css-inject-{idCount}', which increments with each new instance \r\n     * @param  {string} [media] Defaults to \"screen\", but can be used to modify what sort of stylesheet the instance represents, like a dynamic print stylesheet\r\n     */\r\n    constructor(id = `css-inject-${idCount++}`, media = \"screen\") {\r\n        if (!PROTECTED.has(this)) {\r\n            const el = document.createElement(\"style\");\r\n            el.type = \"text/css\";\r\n            el.id = id;\r\n            el.media = media;\r\n            const head = document.head || document.getElementsByTagName('head')[0];\r\n            head.appendChild(el);\r\n    \r\n            const obj = document.styleSheets[document.styleSheets.length - 1];\r\n            const rules = obj.cssRules;\r\n            const styles = [];\r\n    \r\n            PROTECTED.set(this, {\r\n                el,\r\n                id,\r\n                media,\r\n                obj,\r\n                rules,\r\n                styles\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {string} id\r\n     */\r\n    get id() {\r\n        return fetchProperty(this, \"id\");\r\n    }\r\n\r\n    /**\r\n     * @returns {string} media\r\n     */\r\n    get media() {\r\n        return fetchProperty(this, \"media\");\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<string>} styles\r\n     */\r\n    get styles() {\r\n        const styles = fetchProperty(this, \"styles\");\r\n        return (styles) ? styles.slice() : styles;\r\n    }\r\n\r\n    /**\r\n     * @returns {CSSRuleList} rules\r\n     */\r\n    get rules() {\r\n        return fetchProperty(this, \"rules\");\r\n    }\r\n}\r\n\r\nCssRules.prototype.destroy = destroy;\r\nCssRules.prototype.add = add;\r\nCssRules.prototype.remove = remove;\r\nCssRules.prototype.objectAdd = objectAdd;\r\nCssRules.prototype.objectRemove = objectRemove;\r\nCssRules.prototype.arrayRemove = arrayRemove;"]}